module.exports = {
    env: {
        browser: true,
        es6: true,
        node: true,
    },

    extends: [
        'eslint:recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:@angular-eslint/recommended',
        'prettier',
    ],
    parser: '@typescript-eslint/parser',
    parserOptions: {
        ecmaVersion: 12,
        project: 'tsconfig.json',
        tsconfigRootDir: __dirname,
        sourceType: 'module',
        extraFileExtensions: ['.html'],
    },
    plugins: [
        '@angular-eslint/eslint-plugin-template',
        '@angular-eslint/eslint-plugin',
        'eslint-plugin-prefer-arrow',
        'eslint-plugin-import',
        'eslint-plugin-jsdoc',
        '@typescript-eslint',
        'prettier',
        'html',
    ],
    rules: {
        'prettier/prettier': [
            'warn',
            {
                endOfLine: 'auto',
            },
        ],
        '@angular-eslint/component-class-suffix': 'error',
        '@angular-eslint/contextual-lifecycle': 'error',
        '@angular-eslint/directive-class-suffix': 'error',
        '@angular-eslint/no-conflicting-lifecycle': 'error',
        '@angular-eslint/no-host-metadata-property': 'error',
        '@angular-eslint/no-input-rename': 'error',
        '@angular-eslint/no-inputs-metadata-property': 'error',
        '@angular-eslint/no-output-native': 'error',
        '@angular-eslint/no-output-on-prefix': 'error',
        '@angular-eslint/no-output-rename': 'error',
        '@angular-eslint/no-outputs-metadata-property': 'error',
        '@angular-eslint/use-component-view-encapsulation': 'error',
        '@angular-eslint/use-lifecycle-interface': 'error',
        '@angular-eslint/use-pipe-transform-interface': 'error',
        '@typescript-eslint/adjacent-overload-signatures': 'error',
        '@typescript-eslint/array-type': 'off',
        '@typescript-eslint/ban-ts-comment': 'off',
        eqeqeq: 'error',
        '@typescript-eslint/ban-types': [
            'error',
            {
                types: {
                    '{}': false,
                    Object: false,
                    Function: {
                        message:
                            'Avoid using the `Function` type. Prefer a specific function type, like `() => void`.',
                    },
                    Boolean: {
                        message:
                            'Avoid using the `Boolean` type. Did you mean `boolean` ? ',
                    },
                    Number: {
                        message:
                            'Avoid using the `Number` type. Did you mean`number` ? ',
                    },
                    String: {
                        message:
                            'Avoid using the `String` type. Did you mean`string` ? ',
                    },
                    Symbol: {
                        message:
                            'Avoid using the `Symbol` type. Did you mean`symbol` ? ',
                    },
                },
            },
        ],
        '@typescript-eslint/consistent-type-assertions': 'error',
        '@typescript-eslint/consistent-type-definitions': 'error',
        '@typescript-eslint/dot-notation': 'off',
        '@typescript-eslint/explicit-member-accessibility': [
            'off',
            {
                accessibility: 'explicit',
            },
        ],
        '@typescript-eslint/member-delimiter-style': [
            'error',
            {
                multiline: {
                    delimiter: 'semi',
                    requireLast: true,
                },
                singleline: {
                    delimiter: 'semi',
                    requireLast: false,
                },
            },
        ],
        '@typescript-eslint/member-ordering': 'off',
        '@typescript-eslint/naming-convention': 'off',
        '@typescript-eslint/no-empty-function': 'off',
        '@typescript-eslint/no-empty-interface': 'error',
        '@typescript-eslint/no-explicit-any': 'off',
        '@typescript-eslint/no-inferrable-types': [
            'error',
            {
                ignoreParameters: true,
            },
        ],
        '@typescript-eslint/no-misused-new': 'error',
        '@typescript-eslint/no-namespace': 'error',
        '@typescript-eslint/no-parameter-properties': 'off',
        '@typescript-eslint/no-shadow': [
            'error',
            {
                hoist: 'all',
            },
        ],
        '@typescript-eslint/no-unused-expressions': 'error',
        '@typescript-eslint/no-use-before-define': 'off',
        '@typescript-eslint/no-var-requires': 'off',
        '@typescript-eslint/prefer-for-of': 'error',
        '@typescript-eslint/prefer-function-type': 'error',
        '@typescript-eslint/prefer-namespace-keyword': 'error',
        '@typescript-eslint/semi': ['error', 'always'],
        '@typescript-eslint/triple-slash-reference': [
            'error',
            {
                path: 'always',
                types: 'prefer-import',
                lib: 'always',
            },
        ],
        '@typescript-eslint/type-annotation-spacing': 'error',
        '@typescript-eslint/unified-signatures': 'error',
        'arrow-body-style': 'off',
        'arrow-parens': ['off', 'always'],
        'brace-style': ['off', 'off'],
        'comma-dangle': 'off',
        complexity: 'off',
        'constructor-super': 'error',
        curly: 'error',
        'dot-notation': 'off',
        'eol-last': ['error', 'always'],
        'guard-for-in': 'error',
        'id-blacklist': [
            'error',
            'any',
            'Number',
            'number',
            'String',
            'string',
            'Boolean',
            'boolean',
            'Undefined',
            'undefined',
        ],
        'id-match': 'error',
        'import/no-deprecated': 'warn',
        'import/order': 'off',
        'jsdoc/check-alignment': 'error',
        'jsdoc/check-indentation': 'off',
        'jsdoc/newline-after-description': 'off',
        'jsdoc/no-types': 'error',
        'linebreak-style': 'off',
        'max-classes-per-file': 'off',
        'max-len': 'off',
        'new-parens': 'off',
        'newline-per-chained-call': 'off',
        'no-bitwise': 'error',
        'no-caller': 'error',
        'no-cond-assign': 'error',
        'no-console': 'error',
        'no-debugger': 'error',
        'no-empty': 'off',
        'no-empty-function': 'off',
        'no-eval': 'error',
        'no-extra-semi': 'off',
        'no-fallthrough': 'error',
        'no-invalid-this': 'off',
        'no-irregular-whitespace': 'off',
        'no-multiple-empty-lines': 'off',
        'no-new-wrappers': 'error',
        'no-restricted-imports': ['error', 'rxjs/Rx'],
        'no-shadow': 'off',
        'no-throw-literal': 'error',
        'no-trailing-spaces': 'off',
        'no-undef-init': 'error',
        'no-undef': 'off',
        'no-underscore-dangle': 'off',
        'no-unsafe-finally': 'error',
        'no-unused-expressions': 'error',
        'no-unused-labels': 'error',
        'no-use-before-define': 'off',
        '@typescript-eslint/no-non-null-assertion': 'off',
        'no-var': 'off',
        'object-shorthand': 'error',
        'one-var': ['error', 'never'],
        'padded-blocks': [
            'off',
            {
                blocks: 'never',
            },
            {
                allowSingleLineBlocks: true,
            },
        ],
        'prefer-arrow/prefer-arrow-functions': 'off',
        'prefer-const': 'error',
        'quote-props': ['error', 'as-needed'],
        radix: 'error',
        semi: ['error', 'always'],
        'space-before-function-paren': 'off',
        'space-in-parens': ['off', 'never'],
        'spaced-comment': 'off',
        'use-isnan': 'error',
        'valid-typeof': 'off',
        'object-curly-spacing': 'off',
        'array-bracket-newline': 'off',
        'function-call-argument-newline': 'off',
        'require-unicode-regexp': 'off',
        '@typescript-eslint/no-unsafe-call': 'off',
        '@typescript-eslint/no-unsafe-return': 'off',
        '@typescript-eslint/no-unsafe-assignment': 'off',
        '@typescript-eslint/no-unsafe-member-access': 'off',
        'angular/window-service': 'off',
        'no-useless-escape': 'off',
        'angular/typecheck-object': 'off',
        'angular/typecheck-string': 'off',
        'angular/typecheck-number': 'off',
        'angular/typecheck-boolean': 'off',
        'angular/timeout-service': 'off',
        'angular/document-service': 'off',
        '@typescript-eslint/explicit-module-boundary-types': [
            'error',
            { allowArgumentsExplicitlyTypedAsAny: true },
        ],
        'angular/json-functions': 'off',
        'no-prototype-builtins': 'off',
        'angular/module-getter': 'off',
        'angular/definedundefined': 'off',
    },
    ignorePatterns: [
        '**/node_modules/**/*',
        './aio/**/*',
        './integration/**/*',
        './built/**/*',
        './dist/**/*',
        './bazel-out/**/*',
        '**/*.externs.js',
        './packages/compiler-cli/test/compliance/test_cases/**/*',
        './packages/localize/**/test_files/**/*',
        './tools/ts-api-guardian/test/fixtures/**/*',
        './tools/public_api_guard/**/*.d.ts',
        './modules/benchmarks_external/**/*',
        './packages/zone.js/**/*',
        './dev-infra/ng-dev.js',
        './dev-infra/build-worker.js',
        'projects/fuse-ui/**',
        'projects/shared-library/**',
        'projects/airport-ui/src/assets/**',
        'projects/airport-ui/src/app/legacy/**',
        'dist/**',
    ],
};